[
  {
    "title": "Civet: An Efficient Java Partitioning Framework for Hardware Enclaves",
    "abstract": "Abstract:Hardware enclaves are designed to execute small pieces of sensitive code or to operate on sensitive data, in isolation from larger, less trusted systems. Partitioning a large, legacy application requires significant effort. Partitioning an application written in a managed language, such as Java, is more challenging because of mutable language characteristics, extensive code reachability in class libraries, and the inevitability of using a heavyweight runtime.Civet is a framework for partitioning Java applications into enclaves. Civet reduces the number of lines of code in the enclave and uses language-level defenses, including deep type checks and dynamic taint-tracking, to harden the enclave interface. Civet also contributes a partitioned Java runtime design, including a garbage collection design optimized for the peculiarities of enclaves. Civet is efficient for data-intensive workloads; partitioning a Hadoop mapper reduces the enclave overhead from 10× to 16–22% without taint-tracking or 70–80% with taint-tracking.",
    "author": "Authors:Chia-Che Tsai,Texas A&M University;Jeongseok Son,UC Berkeley;Bhushan Jain,The University of North Carolina at Chapel Hill;John McAvey,Hendrix College;Raluca Ada Popa,UC Berkeley;Donald E. Porter,The University of North Carolina at Chapel Hill",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/tsai",
    "comment": ""
  },
  {
    "title": "\"I am uncomfortable sharing what I can't see\": Privacy Concerns of the Visually Impaired with Camera Based Assistive Applications",
    "abstract": "Abstract:The emergence of camera-based assistive technologies has empowered people with visual impairments (VIP) to obtain independence in their daily lives. Popular services feature volunteers who answer questions about photos or videos (e.g., to identify a medical prescription). However, people with VIPs can (inadvertently) reveal sensitive information to these volunteers. To better understand the privacy concerns regarding the disclosure of background objects to different types of human assistants (friends, family, and others), we conducted an online survey with 155 visually impaired participants. In general, our participants had varying concerns depending on the type of assistants and the kind of information. We found that our participants were more concerned about the privacy of bystanders than their own when capturing people in images. We also found that participants were concerned about self-presentation and were more comfortable sharing embarrassing information with family than with their friends. Our findings suggest directions for future work in the development of human-assisted question-answering systems. Specifically, we discuss how humanizing these systems can give people a greater sense of personal security.",
    "author": "Authors:Taslima Akter,Indiana University Bloomington;Bryan Dosono,Syracuse University;Tousif Ahmed and Apu Kapadia,Indiana University Bloomington;Bryan Semaan,Syracuse University",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/akter",
    "comment": ""
  },
  {
    "title": "Delphi: A Cryptographic Inference Service for Neural Networks",
    "abstract": "Abstract:Many companies provide neural network prediction services to users for a wide range of applications. However, current prediction systems compromise  one party's privacy: either the user has to send sensitive inputs to the service provider for classification, or the service provider must store its proprietary neural networks on the user's device. The former harms the personal privacy of the user, while the latter reveals the service provider's proprietary model.We design, implement, and evaluate Delphi, a secure prediction system that allows two parties to run a neural network inference without revealing either party's data. Delphi approaches the problem by simultaneously co-designing cryptography and machine learning. We first design a hybrid cryptographic protocol that improves upon the communication and computation costs over prior work. Second, we develop a planner that automatically generates neural network architecture configurations that navigate the performance-accuracy trade-offs of our hybrid protocol. Together, these techniques allow us to achieve a 22x improvement in prediction latency compared to the state-of-the-art prior work.",
    "author": "Authors:Pratyush Mishra, Ryan Lehmkuhl, Akshayaram Srinivasan, Wenting Zheng, and Raluca Ada Popa,UC Berkeley",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/mishra",
    "comment": ""
  },
  {
    "title": "PHMon: A Programmable Hardware Monitor and Its Security Use Cases",
    "abstract": "Abstract:There has been a resurgent trend in the industry to enforce a variety of security policies in hardware. The current trend for developing dedicated hardware security extensions is an imperfect, lengthy, and costly process. In contrast to this trend, a flexible hardware monitor can efficiently enforce and enhance a variety of security policies as security threats evolve. Existing hardware monitors typically suffer from one (or more) of the following drawbacks: a restricted set of monitoring actions, considerable performance and power overheads, or an invasive design. In this paper, we propose a minimally-invasive and efficient implementation of a Programmable Hardware Monitor (PHMon) with expressive monitoring rules and flexible fine-grained actions. PHMon can enforce a variety of security policies and can also assist with detecting software bugs and security vulnerabilities. Our prototype of PHMon on an FPGA includes the hardware monitor and its interface with a RISC-V Rocket processor as well as a complete Linux software stack. We demonstrate the versatility of PHMon and its ease of adoption through four different use cases: a shadow stack, a hardware-accelerated fuzzing engine, an information leak prevention mechanism, and a hardware-accelerated debugger. Our prototype implementation of PHMon incurs 0.9% performance overhead on average, while the hardware-accelerated fuzzing engine improves fuzzing performance on average by 16× over the state-of-the art software-based implementation. Our ASIC implementation of PHMon only incurs a 5% power overhead and a 13.5% area overhead.",
    "author": "Authors:Leila Delshadtehrani, Sadullah Canakci, Boyou Zhou, Schuyler Eldridge, Ajay Joshi, and Manuel Egele,Boston University",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/delshadtehrani",
    "comment": ""
  },
  {
    "title": "Interpretable Deep Learning under Fire",
    "abstract": "Abstract:Providing explanations for deep neural network (DNN) models is crucial for their use in security-sensitive domains. A plethora of interpretation models have been proposed to help users understand the inner workings of DNNs: how does a DNN arrive at a specific decision for a given input? The improved interpretability is believed to offer a sense of security by involving human in the decision-making process. Yet, due to its data-driven nature, the interpretability itself is potentially susceptible to malicious manipulations, about which little is known thus far.Here we bridge this gap by conducting the first systematic study on the security of interpretable deep learning systems (IDLSes). We show that existing IDLSes are highly vulnerable to adversarial manipulations. Specifically, we present ADV2, a new class of attacks that generate adversarial inputs not only misleading target DNNs but also deceiving their coupled interpretation models. Through empirical evaluation against four major types of IDLSes on benchmark datasets and in security-critical applications (e.g., skin cancer diagnosis), we demonstrate that with ADV2the adversary is able to arbitrarily designate an input's prediction and interpretation. Further, with both analytical and empirical evidence, we identify the prediction-interpretation gap as one root cause of this vulnerability -- a DNN and its interpretation model are often misaligned, resulting in the possibility of exploiting both models simultaneously. Finally, we explore potential countermeasures against ADV2, including leveraging its low transferability and incorporating it in an adversarial training framework. Our findings shed light on designing and operating IDLSes in a more secure and informative fashion, leading to several promising research directions.",
    "author": "Authors:Xinyang Zhang,Pennsylvania State University;Ningfei Wang,University of California Irvine;Hua Shen,Pennsylvania State University;Shouling Ji,Zhejiang University and Alibaba-ZJU Joint Institute of Frontier Technologies;Xiapu Luo,Hong Kong Polytechnic University;Ting Wang,Pennsylvania State University",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/zhang-xinyang",
    "comment": ""
  },
  {
    "title": "BesFS: A POSIX Filesystem for Enclaves with a Mechanized Safety Proof",
    "abstract": "Abstract:New trusted computing primitives such as Intel SGX have shown the feasibility of running user-level applications in enclaves on a commodity trusted processor without trusting a large OS. However, the OS can still compromise the integrity of an enclave by tampering with the system call return values. In fact, it has been shown that a subclass of these attacks, called Iago attacks, enables arbitrary logic execution in enclave programs. Existing enclave systems have very large TCB and they implement ad-hoc checks at the system call interface which are hard to verify for completeness. To this end, we present BesFS—the first filesystem interface which provably protects the enclave integrity against a completely malicious OS. We prove 167 lemmas and 2 key theorems in 4625 lines of Coq proof scripts, which directly proves the safety properties of the BesFS specification. BesFS comprises of 15 APIs with compositional safety and is expressive enough to support 31 real applications we test. BesFS integrates into existing SGX-enabled applications with minimal impact to TCB. BesFS can serve as a reference implementation for hand-coded API checks.",
    "author": "Authors:Shweta Shinde,University of California, Berkeley;Shengyi Wang and Pinghai Yuan,National University of Singapore;Aquinas Hobor,National University of Singapore & Yale-NUS College;Abhik Roychoudhury and Prateek Saxena,National University of Singapore",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/shinde",
    "comment": ""
  },
  {
    "title": "Automatic Hot Patch Generation for Android Kernels",
    "abstract": "Abstract:The rapid growth of the Android ecosystem has led to the fragmentation problem where a wide range of (customized) versions of Android OS exist in the market. This poses a severe security issue as it is very costly for Android vendors to fix vulnerabilities in their customized Android kernels in time. The recent development of the hot patching technique provides an ideal solution to solve this problem since it can be applied to a wide range of Android kernels without interrupting their normal functionalities. However, the current hot patches are written by human experts, which can be time-consuming and error-prone.To this end, we first study the feasibility of automatic patch generation from 373 Android kernel CVEs ranging from 2012 to 2016. Then, we develop an automatic hot patch generation tool, named VULMET, which produces semantic preserving hot patches by learning from the official patches. The key idea of VULMET is to use the weakest precondition reasoning to transform the changes made by the official patches into the hot patch constraints. The experiments have shown that VULMET can generate correct hot patches for 55 real-world Android kernel CVEs. The hot patches do not affect the robustness of the kernels and have low performance overhead.",
    "author": "Authors:Zhengzi Xu,Nanyang Technological University;Yulong Zhang, Longri Zheng, Liangzhao Xia, and Chenfu Bao,Baidu X-Lab;Zhi Wang,Florida State University;Yang Liu,Nanyang Technological University",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/xu",
    "comment": ""
  },
  {
    "title": "Cache Telepathy: Leveraging Shared Resource Attacks to Learn DNN Architectures",
    "abstract": "Abstract:Deep Neural Networks (DNNs) are fast becoming ubiquitous for their ability to attain good accuracy in various machine learning tasks. A DNN’s architecture (i.e., its hyperparameters) broadly determines the DNN’s accuracy and performance, and is often confidential. Attacking a DNN in the cloud to obtain its architecture can potentially provide major commercial value. Further, attaining a DNN’s architecture facilitates other existing DNN attacks.This paper presentsCache Telepathy: an efficient mechanism to help obtain a DNN’s architecture using the cache side channel. The attack is based on the insight that DNN inference relies heavily on tiled GEMM (Generalized Matrix Multiply), and that DNN architecture parameters determine the number of GEMM calls and the dimensions of the matrices used in the GEMM functions. Such information can be leaked through the cache side channel.This paper uses Prime+Probe and Flush+Reload to attack the VGG and ResNet DNNs running OpenBLAS and Intel MKL libraries. Our attack is effective in helping obtain the DNN architectures by very substantially reducing the search space of target DNN architectures. For example, when attacking the OpenBLAS library, for the different layers in VGG-16, it reduces the search space from more than 5.4×1012architectures to just 16; for the different modules in ResNet-50, it reduces the search space from more than 6×1046architectures to only 512.",
    "author": "Authors:Mengjia Yan, Christopher W. Fletcher, and Josep Torrellas,University of Illinois at Urbana-Champaign",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/yan",
    "comment": ""
  },
  {
    "title": "HybCache: Hybrid Side-Channel-Resilient Caches for Trusted Execution Environments",
    "abstract": "Abstract:Modern multi-core processors share cache resources for maximum cache utilization and performance gains. However, this leaves the cache vulnerable to side-channel attacks, where inherent timing differences in shared cache behavior are exploited to infer information on the victim’s execution patterns, ultimately leaking private information such as a secret key. The root cause for these attacks is mutually distrusting processes sharing the cache entries and accessing them in a deterministic and consistent manner. Various defenses against cache side-channel attacks have been proposed. However, they suffer from serious shortcomings: they either degrade performance significantly, impose impractical restrictions, or can only defeat certain classes of these attacks. More importantly, they assume that side-channel-resilient caches are required for the entire execution workload and do not allow the possibility to selectively enable the mitigation only for the security-critical portion of the workload.We present a generic mechanism for a flexible and soft partitioning of set-associative caches and propose a hybrid cache architecture, called HybCache. HybCache can be configured to selectively apply side-channel-resilient cache behavior only for isolated execution domains, while providing the non-isolated execution with conventional cache behavior, capacity and performance. An isolation domain can include one or more processes, specific portions of code, or a Trusted Execution Environment (e.g., SGX or TrustZone). We show that, with minimal hardware modifications and kernel support, HybCache can provide side-channel-resilient cache only for isolated execution with a performance overhead of 3.5–5%, while incurring no performance overhead for the remaining execution workload. We provide a simulator-based and hardware implementation of HybCache to evaluate the performance and area overheads, and show how HybCache mitigates typical access-based and contention-based cache attacks",
    "author": "Authors:Ghada Dessouky, Tommaso Frassetto, and Ahmad-Reza Sadeghi,Technische Universität Darmstadt",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/dessouky",
    "comment": ""
  },
  {
    "title": "GREYONE: Data Flow Sensitive Fuzzing",
    "abstract": "Abstract:Data flow analysis (e.g., dynamic taint analysis) has proven to be useful for guiding fuzzers to explore hard-to-reach code and find vulnerabilities. However, traditional taint analysis is labor-intensive, inaccurate and slow, affecting the fuzzing efficiency. Apart from taint, few data flow features are utilized.In this paper, we proposed a data flow sensitive fuzzing solution GREYONE. We first utilize the classic feature taint to guide fuzzing. A lightweight and sound fuzzing-driven taint inference (FTI) is adopted to infer taint of variables, by monitoring their value changes while mutating input bytes during fuzzing. With the taint, we propose a novel input prioritization model to determine which branch to explore, which bytes to mutate and how to mutate. Further, we use another data flow feature constraint conformance, i.e., distance of tainted variables to values expected in untouched branches, to tune the evolution direction of fuzzing.We implemented a prototype of GREYONE and evaluated it on the LAVA data set and 19 real world programs. The results showed that it outperforms various state-of-the-art fuzzers in terms of both code coverage and vulnerability discovery. In the LAVA data set, GREYONE found all listed bugs and 336 more unlisted. In real world programs, GREYONE on average found 2.12X unique program paths and 3.09X unique bugs than state-of-the-art evolutionary fuzzers, including AFL, VUzzer, CollAFL, Angora and Honggfuzz, Moreover, GREYONE on average found 1.2X unique program paths and 1.52X unique bugs than a state-of-the-art symbolic exeuction assisted fuzzer QSYM. In total, it found 105 new security bugs, of which 41 are confirmed by CVE.",
    "author": "Authors:Shuitao Gan,State Key Laboratory of Mathematical Engineering and Advanced Computing;Chao Zhang,Institute for Network Sciences and Cyberspace of Tsinghua University; Beijing National Research Center for Information Science and Technology;Peng Chen,ByteDance Inc.;Bodong Zhao,Institute for Network Science and Cyberspace, Tsinghua University;Xiaojun Qin and Dong Wu,State Key Laboratory of Mathematical Engineering and Advanced Computing;Zuoning Chen,National Research Center of Parallel Computer Engineering and Technology",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/gan",
    "comment": ""
  },
  {
    "title": "TPM-FAIL: TPM meets Timing and Lattice Attacks",
    "abstract": "Abstract:Trusted Platform Module (TPM) serves as a hardware-based root of trust that protects cryptographic keys from privileged system and physical adversaries. In this work, we perform a black-box timing analysis of TPM 2.0 devices deployed on commodity computers. Our analysis reveals that some of these devices feature secret-dependent execution times during signature generation based on elliptic curves. In particular, we discovered timing leakage on an Intel firmware-based TPM as well as a hardware TPM. We show how this information allows an attacker to apply lattice techniques to recover 256-bit private keys for ECDSA and ECSchnorr signatures. On Intel fTPM, our key recovery succeeds after about 1,300 observations and in less than two minutes. Similarly, we extract the private ECDSA key from a hardware TPM manufactured by STMicroelectronics, which is certified at Common Criteria (CC) EAL 4+, after fewer than 40,000 observations. We further highlight the impact of these vulnerabilities by demonstrating a remote attack against a StrongSwan IPsec VPN that uses a TPM to generate the digital signatures for authentication. In this attack, the remote client recovers the server’s private authentication key by timing only 45,000 authentication handshakes via a network connection.The vulnerabilities we have uncovered emphasize the difficulty of correctly implementing known constant-time techniques, and show the importance of evolutionary testing and transparent evaluation of cryptographic implementations. Even certified devices that claim resistance against attacks require additional scrutiny by the community and industry, as we learn more about these attacks.",
    "author": "Authors:Daniel Moghimi and Berk Sunar,Worcester Polytechnic Institute, Worcester, MA, USA;Thomas Eisenbarth,University of Lübeck, Lübeck, Germany;Nadia Heninger,University of California, San Diego, CA, USA",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/moghimi-tpm",
    "comment": ""
  },
  {
    "title": "P2IM: Scalable and Hardware-independent Firmware Testing via Automatic Peripheral Interface Modeling",
    "abstract": "Abstract:Dynamic testing or fuzzing of embedded firmware is severely limited by hardware-dependence and poor scalability, partly contributing to the widespread vulnerable IoT devices.  We propose a software framework that continuously executes a given firmware binary while channeling inputs from an off-the-shelf fuzzer, enabling  hardware-independent and scalable firmware testing.  Our framework, using a novel technique called P2IM, abstracts diverse  peripherals and handles firmware I/O on the fly based on automatically generated models. P2IM is oblivious to peripheral designs and generic to firmware implementations, and therefore, applicable to a wide range of embedded devices.  We evaluated our framework using 70 sample firmware and 10 firmware from real devices, including a drone, a robot, and a PLC. It successfully executed 79% of the sample firmware without any manual assistance. We also performed a limited fuzzing test on the real firmware, which unveiled 7 unique unknown bugs.",
    "author": "Authors:Bo Feng, Alejandro Mera, and Long Lu,Northeastern University",
    "year": "2020",
    "publication": "security",
    "link": "https://www.usenix.org/conference/usenixsecurity20/presentation/feng",
    "comment": ""
  }
]